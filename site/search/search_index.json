{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>A collection of technical knowledge and notes</p>"},{"location":"SQL/","title":"SQL","text":""},{"location":"SQL/#postgres","title":"Postgres","text":""},{"location":"SQL/#enable-uuid-generation","title":"Enable uuid generation","text":"<pre><code>CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n</code></pre>"},{"location":"SQL/#create-table-with-foreign-key-constraintsreferences","title":"Create table with foreign key constraints/references","text":"<pre><code>CREATE TABLE departments (\nid uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\nname VARCHAR(255) NOT NULL,\ncreated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\nupdated_at TIMESTAMP WITH TIME ZONE DEFAULT NULL\n);\nCREATE TABLE employees (\nid uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\nemail VARCHAR(255) UNIQUE NOT NULL,\nfirst_name VARCHAR(255) NOT NULL,\nlast_name VARCHAR(255) NOT NULL,\ndepartment_id uuid NOT NULL,\ncreated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\nupdated_at TIMESTAMP WITH TIME ZONE DEFAULT NULL,\nFOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE\n);\n</code></pre> <p>or</p> <pre><code>CREATE TABLE departments (\nid uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\nname VARCHAR(255) NOT NULL,\ncreated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\nupdated_at TIMESTAMP WITH TIME ZONE DEFAULT NULL\n);\nCREATE TABLE employees (\nid uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\nemail VARCHAR(255) UNIQUE NOT NULL,\nfirst_name VARCHAR(255) NOT NULL,\nlast_name VARCHAR(255) NOT NULL,\ndepartment_id uuid NOT NULL REFERENCES departments(id) ON DELETE CASCADE,\ncreated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\nupdated_at TIMESTAMP WITH TIME ZONE DEFAULT NULL\n);\n</code></pre>"},{"location":"SQL/#updated_at-timestamp-trigger","title":"updated_at timestamp trigger","text":"<pre><code>CREATE TRIGGER set_timestamp_employees\nBEFORE UPDATE ON employees\nFOR EACH ROW\nEXECUTE PROCEDURE trigger_set_timestamp();\n</code></pre>"},{"location":"SQL/#add-column-and-foreign-key-constraint-to-existing-table","title":"Add column and foreign key constraint to existing table","text":"<pre><code>ALTER TABLE employees\nADD COLUMN department_id uuid DEFAULT NULL, -- Set to NOT NULL once data is populated\nADD CONSTRAINT employee_id_department_id FOREIGN KEY (department_id) REFERENCES departments(id);\n</code></pre> <p>Set column to <code>NOT NULL</code></p> <pre><code>ALTER TABLE employees ALTER COLUMN department_id SET NOT NULL;\n</code></pre>"},{"location":"SQL/#alter-table-column-type-with-casting","title":"Alter table column type (with casting)","text":"<pre><code>CREATE TABLE employees (\n...\nemployment_start_year VARCHAR(4) NOT NULL\n...\n);\nALTER TABLE employees ALTER employment_start_year TYPE INT\nUSING employment_start_year::INTEGER;\n</code></pre>"},{"location":"SQL/#get-week-number-of-a-date","title":"Get week number of a date","text":"<p>N.B. With last day of week is Saturady i.e. new week begins on Sunday</p> <pre><code>CREATE OR REPLACE FUNCTION get_week_number_for_date (date_input date) RETURNS int LANGUAGE plpgsql AS $$ BEGIN RETURN (\n(\n$1 - DATE_TRUNC('year', $1)::date\n) + DATE_PART('isodow', DATE_TRUNC('year', $1))\n)::int / 7 + CASE\nWHEN DATE_PART('isodow', DATE_TRUNC('year', $1)) = 7 THEN 0\nELSE 1\nEND;\nEND;\n$$;\nget_week_number_for_date('2020-01-01');\n</code></pre>"},{"location":"SQL/#count-business-days-between-2-dates","title":"Count business days between 2 dates","text":"<pre><code>CREATE OR REPLACE FUNCTION business_days_count (from_date date, to_date date)\nRETURNS int\nLANGUAGE plpgsql\nAS $$\nBEGIN\nRETURN (SELECT\ncount(d::date) AS d\nFROM\ngenerate_series(from_date, to_date, '1 day'::interval) d\nWHERE\nextract('dow' FROM d)\nNOT in(0, 6));\nEND;\n$$;\n</code></pre>"},{"location":"SQL/#generate_series","title":"GENERATE_SERIES","text":"<p><code>GENERATE_SERIES</code> is pretty handy when creating time-series dataset</p> <pre><code>SELECT * FROM GENERATE_SERIES(2019, 2021, 1) AS \"year\", GENERATE_SERIES(1, 12, 1) AS \"month\";\n</code></pre> <p>Will generate a year-month table</p> year month 2019 1 2019 2 ... ... 2019 12 2020 1 2020 2 ... ... 2020 12 2021 1 2021 2 ... ... 2021 12 <p>...and can also produce a range of dates/time</p> <pre><code>SELECT * FROM generate_series('2022-01-01','2022-01-02', INTERVAL '1 hour');\n</code></pre> generate_series 2022-01-01T00:00:00.000Z 2022-01-01T01:00:00.000Z 2022-01-01T02:00:00.000Z 2022-01-01T03:00:00.000Z 2022-01-01T04:00:00.000Z 2022-01-01T05:00:00.000Z 2022-01-01T06:00:00.000Z 2022-01-01T07:00:00.000Z 2022-01-01T08:00:00.000Z 2022-01-01T09:00:00.000Z 2022-01-01T10:00:00.000Z 2022-01-01T11:00:00.000Z 2022-01-01T12:00:00.000Z 2022-01-01T13:00:00.000Z 2022-01-01T14:00:00.000Z 2022-01-01T15:00:00.000Z 2022-01-01T16:00:00.000Z 2022-01-01T17:00:00.000Z 2022-01-01T18:00:00.000Z 2022-01-01T19:00:00.000Z 2022-01-01T20:00:00.000Z 2022-01-01T21:00:00.000Z 2022-01-01T22:00:00.000Z 2022-01-01T23:00:00.000Z 2022-01-02T00:00:00.000Z <p>... and add some random generated data</p> <pre><code>SELECT random() as rand_figures, *\nFROM generate_series('2022-01-01','2022-01-02', INTERVAL '1 hour');\n</code></pre> rand_figures generate_series 0.203633273951709 2022-01-01T00:00:00.000Z 0.571097886189818 2022-01-01T01:00:00.000Z 0.629665858577937 2022-01-01T02:00:00.000Z 0.0612306422553957 2022-01-01T03:00:00.000Z 0.431237444281578 2022-01-01T04:00:00.000Z 0.229508123826236 2022-01-01T05:00:00.000Z 0.867487183306366 2022-01-01T06:00:00.000Z 0.758365222252905 2022-01-01T07:00:00.000Z 0.155569355469197 2022-01-01T08:00:00.000Z 0.786357307806611 2022-01-01T09:00:00.000Z 0.284404154401273 2022-01-01T10:00:00.000Z 0.367461221758276 2022-01-01T11:00:00.000Z 0.754724379163235 2022-01-01T12:00:00.000Z 0.0396546637639403 2022-01-01T13:00:00.000Z 0.276610609609634 2022-01-01T14:00:00.000Z 0.96564608765766 2022-01-01T15:00:00.000Z 0.127415937371552 2022-01-01T16:00:00.000Z 0.110610570758581 2022-01-01T17:00:00.000Z 0.764237959869206 2022-01-01T18:00:00.000Z 0.24844411527738 2022-01-01T19:00:00.000Z 0.0547867906279862 2022-01-01T20:00:00.000Z 0.977096977643669 2022-01-01T21:00:00.000Z 0.677903080359101 2022-01-01T22:00:00.000Z 0.173856796696782 2022-01-01T23:00:00.000Z 0.896873883903027 2022-01-02T00:00:00.000Z"},{"location":"SQL/#covert-datetimedatetimestamp-to-string","title":"Covert datetime/date/timestamp to string","text":"<pre><code>SELECT TO_CHAR(TIMESTAMP '2023-01-01 05:00:00', 'YYYY-MM-DD');\n</code></pre>"},{"location":"docker/","title":"Docker","text":"<p>Docker cheat sheet</p>"},{"location":"docker/#docker-compose","title":"Docker compose","text":""},{"location":"docker/#create-and-start-containers","title":"Create and start containers","text":"<pre><code>docker-compose up\n</code></pre> <p>To run in background</p> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"docker/#stop-containers","title":"Stop containers","text":"<pre><code>docker-compose down\n</code></pre> <p>...and remove stopped containers</p> <pre><code>docker-compose down --remove-orphans\n</code></pre>"},{"location":"docker/#dockerize-flask-app","title":"Dockerize flask app","text":""},{"location":"docker/#docker-entrypointsh","title":"docker-entrypoint.sh","text":"<p> For Linux  If you want to access host from a docker container, you can find out more on how to do it here</p>"},{"location":"docker/#flask","title":"Flask","text":"<p><code>Dockerfile</code></p> <pre><code>FROM 3.11.3-slim\nWORKDIR /app\nCOPY ./requirements.txt /app\nCOPY . ./app\nRUN pip install -r requirements.txt\n\nEXPOSE 5000\n# `my_app/app.py` is where the flask app initiate\nENV FLASK_APP=my_app/app.py\n# or `production`, `uat` etc\nENV FLASK_ENV=development\n\n# if not using `docker-entrypoint` mentioned earlier\nCMD [\"flask\", \"run\", \"--host\", \"0.0.0.0\"]\n# or with gunicorn\n# CMD [\"gunicorn\", \"-b\", \":5000\", \"my_app.app:app\"]\n</code></pre> <p>add <code>python3 -m flask run</code> to the end of <code>docker-entrypoint.sh</code> if using <code>ENTRYPOINT</code></p> <p>Built the Docker image</p> <pre><code>docker build -t my-flask-app .\n</code></pre> <p>and run the container:</p> <pre><code>docker run -p 5000:5000 my-flask-app\n</code></pre>"},{"location":"git/","title":"Git","text":""},{"location":"git/#rebse-branch-to-another","title":"Rebse branch to another","text":"<pre><code>git rebase origin/branch_name\n</code></pre>"},{"location":"git/#squash-amend-reword-commits-with-interactive-rebase-git-rebase-i","title":"Squash, amend, reword commits with interactive rebase (<code>git rebase -i</code>)","text":""},{"location":"git/#reword-commit-message","title":"Reword commit message","text":"<p>For example, I want to reword one of the last 3 commits</p> <pre><code>git rebase -i HEAD~3\n</code></pre> <p>will output the following</p> <pre><code>pick c2a4d95 reword me please\npick 2a4e409 update SQL query to insert new employee records\npick 08c8836 Refactor and clean up employee class\n\n# Rebase 8d8a4b3..08c8836 onto 8d8a4b3 (3 commands)\n#\n# Commands:\n# p, pick &lt;commit&gt; = use commit\n# r, reword &lt;commit&gt; = use commit, but edit the commit message\n# e, edit &lt;commit&gt; = use commit, but stop for amending\n# s, squash &lt;commit&gt; = use commit, but meld into previous commit\n# f, fixup [-C | -c] &lt;commit&gt; = like \"squash\" but keep only the previous\n#                    commit's log message, unless -C is used, in which case\n#                    keep only this commit's message; -c is same as -C but\n#                    opens the editor\n# x, exec &lt;command&gt; = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop &lt;commit&gt; = remove commit\n# l, label &lt;label&gt; = label current HEAD with a name\n# t, reset &lt;label&gt; = reset HEAD to a label\n# m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]\n#         create a merge commit using the original merge commit's\n#         message (or the oneline, if no original merge commit was\n#         specified); use -c &lt;commit&gt; to reword the commit message\n# u, update-ref &lt;ref&gt; = track a placeholder for the &lt;ref&gt; to be updated\n#                       to this position in the new commits. The &lt;ref&gt; is\n#                       updated at the end of the rebase\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n</code></pre> <p>To reword commit message <code>c2a4d95</code>, we replace <code>pick</code> with <code>reword</code>/<code>r</code> for that commit, then save and exit</p> <pre><code>reword c2a4d95 reword me please\npick 2a4e409 update SQL query to insert new employee records\npick 08c8836 Refactor and clean up employee class\n</code></pre> <p>we can now amend the commit message on the next \"screen\" - update the message then save and exit again:</p> <pre><code>Update documentation\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n...\n</code></pre> <p>It should output a message similar to the one below if rebased successfully:</p> <pre><code>[detached HEAD 7a8daf8] Update documentation\n Date: Sat Apr 22 10:01:48 2023 +0100\n 1 file changed, 71 insertions(+)\n create mode 100644 docs/docker.md\nSuccessfully rebased and updated refs/heads/rebase-test.\n</code></pre>"},{"location":"git/#squash-commits","title":"Squash commits","text":"<p>Using the same example from <code>reword</code> above, we now want to squash the three commits into one and amend the first commit message again:</p> <pre><code>reword 7a8daf8 Update documentation\nfixup 96dce5b update SQL query to insert new employee records\nfixup 467b4cc Refactor and clean up employee class\n</code></pre> <p>Here we use <code>fixup</code>/<code>f</code> instead of <code>squash</code>/<code>s</code> as we are discarding all the other commit messages except the top one.</p> <p>Again we should get <code>Successfully rebased and updated ...</code> if rebased successfully.</p>"},{"location":"Python/pandas/","title":"Pandas","text":""},{"location":"Python/pandas/#flatten-entityattributevalue-modelstables-using-pandas-dataframe","title":"Flatten entity\u2013attribute\u2013value models/tables using Pandas dataframe","text":"<p>users (entity/object table)</p> id name email 1 John Smith john.smith@example.com 2 Jane Smith jane.smith@example.com <p>page_config (attribute table)</p> id name 1 font-size 2 color 3 background-color <p>users_page_config (EAV table)</p> id user_id page_config_id value 1 1 1 12px 2 1 2 #3e3e3e 3 1 3 blue 4 2 1 16px 5 2 2 #000000 6 2 3 green <pre><code>import numpy as np\nimport pandas as pd\nclass EavFlattener:\ndef flatten_eav_table(self, data):\nresult_df = pd.DataFrame(data)\nresult_df = result_df.pivot(index=\"user_id\", columns='attribute')['attribute_value']\nresult_df = result_df.reset_index()\nresult_df = result_df.drop(np.nan, axis=1)\nreturn result_df\ndata = [\n{'user_id': 1, 'attribute': 'font-size', 'attribute_value': '12px'},\n{'user_id': 1, 'attribute': 'color', 'attribute_value': '#3e3e3e'},\n{'user_id': 1, 'attribute': 'background-color', 'attribute_value': 'blue'},\n{'user_id': 2, 'attribute': 'font-size', 'attribute_value': '16px'},\n{'user_id': 2, 'attribute': 'color', 'attribute_value': '#000000'},\n{'user_id': 2, 'attribute': 'background-color', 'attribute_value': 'green'}\n]\nEavFlattener().flatten_eav_table(data)\n# Flattened EAV data\n# [{'user_id': 1, 'background-color': 'blue', 'color': '#3e3e3e', 'font-size': '12px'},\n#  {'user_id': 2, 'background-color': 'green', 'color': '#000000', 'font-size': '16px'}]\n</code></pre>"},{"location":"Python/python%20notes/","title":"Python notes","text":""},{"location":"Python/python%20notes/#creating-decorator","title":"Creating decorator","text":"<pre><code>def logged_in_user(function) -&gt; Any:\n@wraps(function)\ndef get_logged_in_user(*args, **kwargs):\ncurrent_user = get_valid_current_user()\nreturn function(*args, **kwargs, current_user=current_user)\nreturn get_logged_in_user\n@app.post('/')\n@logged_in_user\ndef app_root_page(current_user):\n...\n</code></pre>"},{"location":"Python/python%20notes/#creating-batch-from-list","title":"creating batch from list","text":"<pre><code>def create_batch(self, obj_ls: list[\"ObjCls\"], batch_size: int):\nfor i in range(0, len(obj_ls), batch_size):\nyield obj_ls[i : i + batch_size]\n</code></pre>"},{"location":"Python/python%20notes/#list-filtering","title":"List filtering","text":"<p>Supposing we need to filter out the results from the below list of dictionaries</p> <pre><code>exam_results = [\n{\"name\": \"John\", \"score\": 70, \"subject\": \"German\"},\n{\"name\": \"Jane\", \"score\": 80, \"subject\": \"Maths\"},\n{\"name\": \"Mary\", \"score\": 60, \"subject\": \"French\"},\n{\"name\": \"Sam\", \"score\": 75, \"subject\": \"Graphics\"},\n{\"name\": \"Alex\", \"score\": 50, \"subject\": \"Chemistry\"},\n{\"name\": \"Theo\", \"score\": 40, \"subject\": \"Chemistry\"},\n]\n</code></pre> <p>To retrieve exam results where <code>score</code> is higher than 65:</p> <pre><code>filtered_result = list(filter(lambda x: x[\"score\"] &gt; 65, exam_results))\nprint(filtered_result)\n# [{\"name\": \"John\", \"score\": 70, \"subject\": \"German\"}, {\"name\": \"Jane\", \"score\": 80, \"subject\": \"Maths\"}, {\"name\": \"Sam\", \"score\": 75, \"subject\": \"Graphics\"}]\n</code></pre> <p>To retrieve exam results where <code>score</code> is equal or higher than 50 and subject is either <code>Chemistry</code>, <code>French</code>, <code>Graphics</code>:</p> <pre><code>filtered_subject_results = list(filter(lambda x, subject=subject_name: x[\"score\"] &gt;= 50 and x[\"subject\"] in ([\"Chemistry\", \"French\", \"Graphics\"]), exam_results))\nprint(filtered_subject_results)\n# [{\"name\": \"Mary\", \"score\": 60, \"subject\": \"French\"}, {\"name\": \"Sam\", \"score\": 75, \"subject\": \"Graphics\"}, {\"name\": \"Alex\", \"score\": 50, \"subject\": \"Chemistry\"}]\n</code></pre> <p>...and with <code>subject</code> in specific order using for-loop</p> <pre><code>filtered_subject_results = []\nfor subject_name in [\"Chemistry\", \"French\", \"Graphics\"]:\nresult = list(filter(lambda x, subject=subject_name: x[\"score\"] &gt;= 50 and x[\"subject\"] == subject_name, exam_results))\nfiltered_subject_results = filtered_subject_results + result\nprint(filtered_subject_results)\n# [{\"name\": \"Alex\", \"score\": 50, \"subject\": \"Chemistry\"}, {\"name\": \"Mary\", \"score\": 60, \"subject\": \"French\"}, {\"name\": \"Sam\", \"score\": 75, \"subject\": \"Graphics\"}]\n</code></pre> <p>...or with <code>sorted</code></p> <pre><code>filtered_subject_results = list(filter(lambda x, subject=subject_name: x[\"score\"] &gt;= 50 and x[\"subject\"] in ([\"Chemistry\", \"French\", \"Graphics\"]), exam_results))\nfiltered_subject_results = sorted(filtered_subject_results, key=lambda x: (x[\"subject\"]))\nprint(filtered_subject_results)\n# [{\"name\": \"Alex\", \"score\": 50, \"subject\": \"Chemistry\"}, {\"name\": \"Mary\", \"score\": 60, \"subject\": \"French\"}, {\"name\": \"Sam\", \"score\": 75, \"subject\": \"Graphics\"}]\n</code></pre>"},{"location":"Python/python%20notes/#sort-groupby-itertools","title":"sort &amp; groupby (itertools)","text":"<p>Assuming we have a list of dictionaries of students needed to be grouped by year-class:</p> <pre><code>students_ls = [\n{\"name\": \"John\", \"email\": \"john@random_school.edu.uk\", \"year\": 1, \"class\": \"A\"},\n{\"name\": \"Jane\", \"email\": \"jane@random_school.edu.uk\", \"year\": 1, \"class\": \"B\"},\n{\"name\": \"Mary\", \"email\": \"mary@random_school.edu.uk\", \"year\": 2, \"class\": \"C\"},\n{\"name\": \"Alex\", \"email\": \"alex@random_school.edu.uk\", \"year\": 2, \"class\": \"A\"},\n{\"name\": \"Sam\", \"email\": \"sam@random_school.edu.uk\", \"year\": 3, \"class\": \"A\"},\n{\"name\": \"Hannah\", \"email\": \"hannah@random_school.edu.uk\", \"year\": 3, \"class\": \"A\"},\n{\"name\": \"Kim\", \"email\": \"kim@random_school.edu.uk\", \"year\": 3, \"class\": \"B\"},\n{\"name\": \"Ted\", \"email\": \"ted@random_school.edu.uk\", \"year\": 3, \"class\": \"A\"},\n]\n</code></pre> <p>First, we have to sorted the list by year and class as the documentation states that the list need to be sorted before applying <code>groupby</code></p> <pre><code>sorted_students_ls = sorted(students_ls, key=lambda x: (x[\"year\"], x[\"class\"]))\nprint(sorted_students_ls)\n# [\n#   {'class': 'A', 'email': 'john@random_school.edu.uk', 'name': 'John', 'year': 1},\n#   {'class': 'B', 'email': 'jane@random_school.edu.uk', 'name': 'Jane', 'year': 1},\n#   {'class': 'A', 'email': 'alex@random_school.edu.uk', 'name': 'Alex', 'year': 2},\n#   {'class': 'C', 'email': 'mary@random_school.edu.uk', 'name': 'Mary', 'year': 2},\n#   {'class': 'A', 'email': 'sam@random_school.edu.uk', 'name': 'Sam', 'year': 3},\n#   {'class': 'A', 'email': 'hannah@random_school.edu.uk', 'name': 'Hannah', 'year': 3},\n#   {'class': 'A', 'email': 'ted@random_school.edu.uk', 'name': 'Ted', 'year': 3},\n#   {'class': 'B', 'email': 'kim@random_school.edu.uk', 'name': 'Kim', 'year': 3}\n# ]\n</code></pre> <p>Then apply <code>groupby</code>:</p> <pre><code>grouped_data_single_line = {f\"{k[0]}-{k[1]}\": list(students) for k, students in itertools.groupby(sorted_students_ls, key=lambda x: (x[\"year\"], x[\"class\"]))}\nprint(grouped_data_single_line)\n# {\n#   \"1-A\": [{'class': 'A', 'email': 'john@random_school.edu.uk', 'name': 'John', 'year': 1}],\n#   \"1-B\": [{'class': 'B', 'email': 'jane@random_school.edu.uk', 'name': 'Jane', 'year': 1}],\n#   \"2-A\": [{'class': 'A', 'email': 'alex@random_school.edu.uk', 'name': 'Alex', 'year': 2}],\n#   \"2-C\": [{'class': 'C', 'email': 'mary@random_school.edu.uk', 'name': 'Mary', 'year': 2}],\n#   \"3-A\": [{'class': 'A', 'email': 'sam@random_school.edu.uk', 'name': 'Sam', 'year': 3},\n#           {'class': 'A', 'email': 'hannah@random_school.edu.uk', 'name': 'Hannah', 'year': 3},\n#           {'class': 'A', 'email': 'ted@random_school.edu.uk', 'name': 'Ted', 'year': 3}],\n#   \"3-B\": [{'class': 'B', 'email': 'kim@random_school.edu.uk', 'name': 'Kim', 'year': 3}]\n# }\n</code></pre> <p>or below if require data formatting</p> <pre><code>grouped_data = {}\nfor k, students in itertools.groupby(sorted_students_ls, key=lambda x: (x[\"year\"], x[\"class\"])):\ndata_key = f\"{k[0]}-{k[1]}\"\ngrouped_data[data_key] = [{\"name\": student[\"name\"], \"email\": student[\"email\"]} for student in list(students)]\nprint(grouped_data_single_line)\n# {\n#     '1-A': [{'email': 'john@random_school.edu.uk', 'name': 'John'}],\n#     '1-B': [{'email': 'jane@random_school.edu.uk', 'name': 'Jane'}],\n#     '2-A': [{'email': 'alex@random_school.edu.uk', 'name': 'Alex'}],\n#     '2-C': [{'email': 'mary@random_school.edu.uk', 'name': 'Mary'}],\n#     '3-A': [{'email': 'sam@random_school.edu.uk', 'name': 'Sam'},\n#             {'email': 'hannah@random_school.edu.uk', 'name': 'Hannah'},\n#             {'email': 'ted@random_school.edu.uk', 'name': 'Ted'}],\n#     '3-B': [{'email': 'kim@random_school.edu.uk', 'name': 'Kim'}]\n# }\n</code></pre>"},{"location":"Python/python%20notes/#dates-related","title":"Dates related","text":"<p> Get last day of week from a given date </p> <pre><code>from datetime import date, datetime, timedelta\ndef get_week_end(date_input: date):\n# use 6 for week ending on Sunday\nreturn date_input + timedelta(days=5 - date_input.weekday())\n</code></pre> <p> Get last day of month from a given date </p> <pre><code>import bisect\nimport calendar\nfrom datetime import date, datetime, timedelta\ndef get_month_end(date_input: date):\nlast_day_of_month = calendar.monthrange(date_input.year, date_input.month)[1]\nreturn date(date_input.year, date_input.month, last_day_of_month)\n</code></pre> <p> Get start &amp; end of quarter from a given date </p> <pre><code>import bisect\nimport calendar\nfrom datetime import date, datetime, timedelta\ndef get_quarter_end(date_input: date):\nquarter_ends = [date(date_input.year, month, 1) + timedelta(days=-1) for month in (4, 7, 10)]\nquarter_ends.append(date(date_input.year + 1, 1, 1) + timedelta(days=-1))\nidx = bisect.bisect_left(quarter_ends, date_input)\nreturn quarter_ends[idx]\ndef get_quarter_start(date_input: date):\nquarter_start = [date(date_input.year, month, 1) for month in (1, 4, 7, 10)]\nidx = bisect.bisect(quarter_start, date_input)\nreturn quarter_start[idx - 1]\n</code></pre>"},{"location":"Python/python%20notes/#user-authorisationpermission","title":"User authorisation/permission","text":"<p>An tiny user authorisation/permission python/flask class inspired by Ruby's authorization library Pundit</p> <pre><code>import inspect\nimport re\nfrom flask import g, request\nfrom path.to.user.model import User\n@staticmethod\ndef to_snake_case(obj_str):\nreg_match = re.compile(\"((?&lt;=[a-z0-9])[A-Z]|(?!^)(?&lt;!_)[A-Z](?=[a-z]))\")\nreturn reg_match.sub(r\"_\\1\", obj_str).lower()\nclass UserAuth:\ndef __init__(self):\nself._current_user = None\n@property\ndef current_user(self):\nif self._current_user is None:\n# can replace with g.current_user or method to get current user\nself._current_user = User.get(g.user_id)\nreturn self._current_user\n@classmethod\ndef get_policy_cls(cls, model_cls):\nmodel_cls_name = model_cls.__name__\nmodel_name_snake_case = to_snake_case(model_cls_name)\npolicy_path = f\"path.to.policies.{model_name_snake_case}_policy\"\npolicy_module = __import__(policy_path, fromlist=[f\"{model_cls_name}Policy\"])\npolicy_cls = getattr(policy_module, f\"{model_cls_name}Policy\")\nreturn policy_cls\n@classmethod\ndef authorised_action(cls, model_obj, action=None, *args, **kwargs):\nmodel_cls = cls.get_model_class(model_obj)\nmodel_policy = cls.get_policy_cls(model_cls)\naction = action or request.method.lower()\nreturn getattr(model_policy(self.current_user, model_obj), action)(*args, **kwargs)\n@classmethod\ndef authorised_scope(cls, model_obj, *args, **kwargs):\nmodel_cls = cls.get_model_class(model_obj)\nmodel_policy = cls.get_policy_cls(model_cls)\nreturn getattr(model_policy(self.current_user, model_cls), \"scope\")(*args, **kwargs)\n@classmethod\ndef get_model_class(cls, model_obj):\nif inspect.isclass(model_obj):\nreturn model_obj\nreturn model_obj.__class__\n</code></pre>"},{"location":"Python/python%20notes/#how-it-works","title":"How it works","text":"<p>Assuming we have a <code>User</code> class similar to the example below (with SQLAlchemy):</p> <pre><code># Path to SQLalchemy/Database config\nfrom app.setting.database import db\nclass UserRole(enum.Enum):\nREGISTER = 1\nADMIN = 2\nclass User(db.Model):\n# for dataclass, can do this instead of `__init__`\n# id: uuid.UUID\n# email: str\n# first_name: str\n# role: UserRole = UserRole.REGISTER\ndef __init__(self, email: str, name: str, role: int = UserRole.REGISTER) -&gt; None:\nself.email = email\nself.name = name\nself.role = role\n@classmethod\ndef create(cls, email: str, name: str, role: int = UserRole.REGISTER) -&gt; \"User\":\nuser = cls(email=email, name=name, role=role)\ndb.session.add(user)\ndb.session.commit()\nreturn user\n@classmethod\ndef get(cls, id: str) -&gt; \"User\":\nreturn cls.query.get(id)\n@classmethod\ndef all(cls) -&gt; list[\"User\"]:\nreturn cls.query.all()\ndef update(self, name: str, email:str) -&gt; None:\nself.name = name\nself.email = email\ndb.session.commit()\n@property\ndef is_admin(self) -&gt; bool:\nreturn self.role == UserRole.ADMIN\n</code></pre> <p>And <code>UserPolicy</code> - assuming only admin users can create, read, update and view all users, while registered users can only view their only user accounts:</p> <pre><code>class UserPolicy:\ndef __init__(self, user: User, user_obj: User) -&gt; None:\nself.user = user\nself.user_obj = user_obj\ndef create(self) -&gt; bool:\nreturn self.user.is_admin:\ndef update(self) -&gt; bool:\nreturn self.user.is_admin:\ndef get(self) -&gt; bool:\nreturn (self.user.id == self.user.id) or self.user.is_admin\ndef scope(self) -&gt; list[User]:\nif self.user.is_admin:\nreturn self.user_obj.all()\nreturn [self.user_obj.get(self.user.id)]\n</code></pre> <p>(Optional) And a custom exception class when current user not authorised to perform particular action(s) defined in the policy:</p> <pre><code>class PermissionRequired(BaseError):\ndef __init__(self):\nsuper().__init__(403, \"Permission denied\")\n</code></pre> <p>To check if the current user is authorised to perform a particular <code>User</code> action - in this example update, in a routing/view:</p> <pre><code>from path.to.user_auth import UserAuth\nfrom path.to.user.model import User\n@app.post('/users/&lt;user_id&gt;')\ndef update(user_id):\nuser = User.get(user_id)\nif UserAuth.authorize(user, \"update\"):\nreturn user\nreturn render_template(\"403.html\"), 403\n@app.post('/users')\ndef all():\nuser_records = UserAuth.authorised_scope(User)\nreturn jsonify(user_records)\n</code></pre> <p>or in a service class:</p> <pre><code>from path.to.user_auth import UserAuth\nfrom path.to.user.model import User\nclass UsersService:\ndef update(self, user_id: str, name: str, email: str) -&gt; dict[str, str]:\nuser = User.get(user_id)\nif not UserAuth.authorised_action(user, \"update\"):\nraise PermissionRequired()\nuser.update(name=name, email=email)\nreturn {\"message\": \"User successfully update\"}\n</code></pre> <p>The <code>UserAuth.authorize</code> takes two parameters:</p> <ul> <li>the model object (can be an instance or a class) you want to authorise the current user on</li> <li>the action or class method to authorise - in this case <code>update</code>. By default, if nothing passes as the parameter it will use the <code>request.method</code>, e.g. <code>post</code> in the example, and will require to define a <code>post</code> method in the policy:</li> </ul> <pre><code>class UserPolicy:\n...\ndef post(self) -&gt; bool:\nreturn self.user.is_admin:\n...\n</code></pre>"},{"location":"Python/sqlalchemy/","title":"Sqlalchemy","text":""},{"location":"Python/sqlalchemy/#intenum","title":"IntEnum","text":"<p>Storing the enum integer value to the database</p> <pre><code>from sqlalchemy import types\nclass IntEnum(types.TypeDecorator):\nimpl = Integer\ndef __init__(self, enumtype, *args, **kwargs):\nsuper().__init__(*args, **kwargs)\nself._enumtype = enumtype\ndef process_bind_param(self, value, dialect):\nreturn value.value\ndef process_result_value(self, value, dialect):\nreturn self._enumtype(value)\n</code></pre> <pre><code>class Role(enum.Enum):\nREGISTERED = 1\nMODERATOR = 2\nADMIN = 3\nclass User(db.Model):\n__tablename__ = \"users\"\nid: uuid.UUID = db.Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\nname: str = db.Column(db.String(50), nullable=False)\nemail: str = db.Column(db.String(50), nullable=False)\nrole: int = db.Column(IntEnum(Role), nullable=False, default=1)\n</code></pre>"},{"location":"Python/sqlalchemy/#query-mixin","title":"Query mixin","text":"<pre><code>class QueryMixin:\n@classmethod\ndef get(cls, id):\nreturn cls.query.get(id)\n@classmethod\ndef _filters(cls, kwargs):\nreturn [getattr(cls, attr) == kwargs[attr] for attr in kwargs]\n@classmethod\ndef find_by(cls, **kwargs):\nfilters = cls._filters(kwargs)\nreturn db.session.execute(db.select(cls).where(*filters)).scalars().first()\n@classmethod\ndef find_all(cls, **kwargs):\nfilters = cls._filters(kwargs)\nreturn db.session.execute(db.select(cls).where(*filters)).scalars().all()\n@classmethod\ndef find_all_in(cls, **kwargs):\nfilters = [getattr(cls, attr).in_(kwargs[attr]) for attr in kwargs]\nreturn db.session.execute(db.select(cls).where(*filters)).scalars().all()\n@classmethod\ndef find_all_not_in(cls, **kwargs):\nfilters = [getattr(cls, attr).not_in(kwargs[attr]) for attr in kwargs]\nreturn db.session.execute(db.select(cls).where(*filters)).scalars().all()\n@classmethod\ndef delete_if_exists(cls, **kwargs):\nfilters = cls._filters(kwargs)\ncls.query.where(*filters).delete()\ndb.session.commit()\ndef delete(self):\ndb.session.delete(self)\ndb.session.commit()\ndef to_dict(self):\nreturn {\ncolumn.name: getattr(self, column.name)\nif not isinstance(getattr(self, column.name), (datetime, date))\nelse getattr(self, column.name).isoformat()\nfor column in self.__table__.columns\n}\n</code></pre>"},{"location":"Python/sqlalchemy/#insertreturning","title":"Insert...returning","text":"<pre><code>    data = [\n{\"name\": \"Sally\", \"email\": \"sally@user.email\"},\n{\"name\": \"Jon\", \"email\": \"jon@user.email\"},\n{\"name\": \"Ken\", \"email\": \"ken@user.email\"},\n{\"name\": \"Jess\", \"email\": \"jess@user.email\"}\n]\nemployees = db.session.execute(insert(Employee).returning(Employee), data).all()\n</code></pre>"},{"location":"Python/sqlalchemy/#updatereturning","title":"Update...returning","text":"<pre><code>    employee_id = \"ec38f27b-79a2-4739-b96a-6bc2babcc2c9\"\nupdate_params = {\"name\": \"Ken\", \"email\": \"ken@another.email\"}\nupdate_stmt = update(Employee).where(Employee.id == employee_id).values(update_params).returning(Employee)\nemployees = db.session.execute(update_stmt).first()\n</code></pre>"},{"location":"Python/sqlalchemy/#update-multiple-records-where-the-where-conditons-is-different-for-each-record","title":"Update multiple records where the <code>WHERE</code> conditons is different for each record","text":"<pre><code>    data = [\n{\"employee_id\": \"443bd75a-3baa-4b17-a391-af00af9e3325\", \"name\": \"Sally\", \"email\": \"sally@user.email\", \"new_department\": \"Marketing\"},\n{\"employee_id\": \"52ca61aa-399d-4a0c-9482-6e0ec3ab4891\", \"name\": \"Jon\", \"email\": \"jon@user.email\", \"new_department\": \"IT\"},\n{\"employee_id\": \"ec38f27b-79a2-4739-b96a-6bc2babcc2c9\", \"name\": \"Ken\", \"email\": \"ken@user.email\", \"new_department\": \"Finance\"},\n{\"employee_id\": \"0d28cbbd-f073-4420-9f73-3dfc93c7696e\", \"name\": \"Jess\", \"email\": \"jess@user.email\", \"new_department\": \"Marketing\"},\n]\nupdate_stmt = (\nupdate(Employee)\n.where(Employee.id == bindparam(\"employee_id\"))\n.values(\n{\"department_id\": select(Department.id).where(Department.name == bindparam(\"new_department\")).scalar_subquery()}\n)\n)\ndb.session.execute(update_stmt, data)\n</code></pre>"},{"location":"Python/sqlalchemy/#nested-transaction","title":"Nested transaction","text":"<pre><code>    db.session.begin_nested()\n</code></pre>"},{"location":"Python/testing/","title":"Testing","text":""},{"location":"Python/testing/#pytest","title":"Pytest","text":""},{"location":"Python/testing/#testing-endpoints","title":"Testing endpoints","text":"<pre><code>class TestClsNamePage:\ndef setup_method(self):\nself.app = app.test_client()\nself.app_context = app.app_context()\nself.app_context.push()\n# Test get endpoint and assert content on page\ndef test_get_endpoint(self):\nresponse = self.app.get(\"/\")\nassert response.status_code == 200\npage_content = response.data.decode(\"utf-8\")\nassert \"Hello!\" in page_content\n# Test endpoint with headers\ndef test_endponint_with_headers(self):\nresponse = self.app.get(\"/\", headers={\"Auth-Token\": \"some-random-auth-token-values\"})\nassert response.status_code == 200\n# Test get endpoint and content on page after redirect\ndef test_get_endpoint(self):\nresponse = self.app.get(\"/redirect_to_another_page\", follow_redirects=True)\nassert response.status_code == 200\npage_content = response.data.decode(\"utf-8\")\nassert \"Redirected\" in page_content\n# Test get endpoint with JSON response\ndef test_get_endpoint(self):\n# assuming endpoint return {\"message\": \"Hello!\"}\nresponse = self.app.get(\"/json_response\")\nassert response.status_code == 200\ndata = json.loads(response.data)\nassert data[\"message\"] == \"Hello!\"\n# Test post endpoint - HTML form submission\ndef test_post_form_submit(self):\nresponse = self.app.post(\"/users\", data={\"name\": \"user\", \"email\": \"user@test.com\"})\nassert response.status_code == 200\n# Test post endpoint - HTML form submission with multi select\ndef test_post_multi_select_form_submit(self):\n# Remember to import ImmutableMultiDict: `from werkzeug.datastructures import ImmutableMultiDict`\nform = ImmutableMultiDict(\n[(\"user_id\", \"user_id_1\"), (\"user_id\", \"user_id_2\"), (\"user_id\", \"user_id_2\")]\n)\nresponse = self.app.post(\"/users/multi_select\", data=form)\nassert response.status_code == 200\n# Test post endpoint JSON params\ndef test_post_json_params(self):\nresponse = self.app.post(\"/users\", json={\"name\": \"user\", \"email\": \"user@test.com\"})\nassert response.status_code == 200\n</code></pre>"},{"location":"Python/testing/#parametrize-tests","title":"Parametrize tests","text":"<pre><code>import pytest\nclass TestClsName:\n@pytest.mark.parametrize(\"param_1, param_2, param3, expected_result\", [\n(test_1_param_1, test_1_param_2, test_1_param_3, test_1_expected_result),\n(test_2_param_1, test_2_param_2, test_2_param_3, test_2_expected_result),\n(test_3_param_1, test_3_param_2, test_3_param_3, test_3_expected_result),\n])\ndef test_some_test_with_parametrize(self, param_1, param_2, param3, expected_result):\nresult = method_to_test(param_1, param_2, param3)\nassert result == expected_result\n</code></pre>"},{"location":"Python/testing/#mockpatching","title":"Mock/patching","text":"<p> Mock method to return specific value </p> <pre><code>class TestClsName:\ndef test_method_with_patch(self):\nwith patch(\"path.to.class.ClassName.method_name\") as mocked_method:\nmocked_method.return_value = [1,2,3]\n</code></pre> <p> Mock method to raise exception </p> <pre><code>class TestClsName:\ndef test_method_with_mocked_exception(self):\nwith patch(\"path.to.class.ClassName.method_name\") as mocked_method:\nmocked_method.side_effect = Exception(\"error\")\n</code></pre> <p> Mock response with JSON response, status_code </p> <pre><code>class MockResponse:\ndef __init__(self, json_data, status_code):\nself.json_data = json_data\nself.status_code = status_code\ndef json(self):\nreturn self.json_data\nclass TestClsName:\ndef test_method_with_post_request(self):\nwith patch(\"app.model.ClsName.requests.post\") as mocked_request:\nmocked_request.return_value=MockResponse({\"message\": \"ta-da\", \"status\": \"success\"}, 200)\nresult = method_with_post_request()\n...\n</code></pre> <p> Mock response with raise_for_status </p> <pre><code>class TestClsName:\ndef test_method_with_post_request_raise_for_status(self):\nwith patch(\"app.model.ClsName.requests.post\") as mocked_request:\nmocked_status = Mock(status_code=500)\nmocked_status.raise_for_status = Mock(side_effect=requests.exceptions.RequestException(\"Error\"))\nmocked_request.return_value = mocked_status\nresult = method_with_post_request()\n...\n</code></pre>"},{"location":"Python/testing/#mock-aws-services-with-moto","title":"Mock AWS services with moto","text":"<p>For example, creating a S3 mock with moto</p> <pre><code>@pytest.fixture(scope=\"session\")\ndef aws_credentials():\n\"\"\"Mocked AWS Credentials for moto.\"\"\"\nos.environ[\"AWS_ACCESS_KEY_ID\"] = \"testing\"\nos.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"testing\"\nos.environ[\"AWS_SECURITY_TOKEN\"] = \"testing\"\nos.environ[\"AWS_SESSION_TOKEN\"] = \"testing\"\nos.environ[\"AWS_DEFAULT_REGION\"] = \"eu-west-1\"\n@pytest.fixture(autouse=False)\ndef s3_client(aws_credentials):\nwith mock_s3():\nconn = boto3.client(\"s3\", region_name=\"us-east-1\")\nyield conn\n</code></pre> <p>And in tests, use <code>s3_client</code> as fixture</p> <pre><code>@pytest.fixture\ndef s3_bucket(s3_client):\ns3_client.create_bucket(Bucket=bucket_name)\nyield\nclass TestS3Service:\ndef test_s3_bucket_list_objects(self, s3_client, s3_bucket):\nS3Service().list_objects()\n...\n</code></pre>"},{"location":"Python/testing/#monkeypatching-sqlalchemy-connection","title":"Monkeypatching SQLAlchemy connection","text":"<p> For SQLAlchemy 1.4 </p> <pre><code>@pytest.fixture\ndef app(request):\napp = _app\nwith app.app_context():\nyield app\n@pytest.fixture\ndef db(app, request, monkeypatch):\nconnection = _db.engine.connect()\ntransaction = connection.begin()\n# https://github.com/pallets/flask-sqlalchemy/pull/249#issuecomment-628303481\nmonkeypatch.setattr(_db, \"get_engine\", lambda *args, **kwargs: connection)\ntry:\nyield _db\nfinally:\n_db.session.remove()\ntransaction.rollback()\nconnection.close()\n</code></pre> <p>And use <code>db</code> as fixture</p> <pre><code>@pytest.mark.usefixtures(\"db\")\nclass TestClsName:\n...\n</code></pre> <pre><code>def test_method_name(self, db):\n...\n</code></pre> <p>When testing database rollback use <code>db.session.begin_nested()</code> to begin a \"nested\" transaction/savepoint</p> <pre><code>class TestClsName:\ndef test_method_with_db_rollback(self, db):\ncreate_test_objects()\ndb.session.begin_nested()\nresult = method_with_db_rollback()\nassert result == expected_result\n</code></pre>"},{"location":"Python/testing/#assert-exception-raised","title":"Assert exception raised","text":"<pre><code>class TestUser:\ndef test_user_init_failed_on_missing_required_values(self):\nwith pytest.raises(TypeError) as error:\nUser()\nassert str(error.value) == \"__init__() missing 2 required positional argument: 'name', 'email'\"\n</code></pre>"},{"location":"Python/testing/#assert-parameters-pass-to-methodmock-method","title":"Assert parameters pass to method/mock method","text":"<p>Passing the actual method to <code>side_effect</code> will call the actual method instead of \"mocked\"</p> <pre><code>    with patch.object(ClsName, \"method_name\", side_effect=ClsName().method_name) as mocked_method:\nmocked_method.assert_called_with(\nparam_1=expected_param_1,\nparam_2=expected_param_2,\nparam_3=expected_param_3,\n)\n</code></pre>"},{"location":"Python/testing/#mock-results-of-repeatedmultiple-calls-to-the-same-method","title":"Mock results of repeated/multiple calls to the same method","text":"<p>For example, calling a method in a loop:</p> <pre><code>def loopy_loop():\nfor i in range(3):\nresult = do_something()\nprint(result)\n</code></pre> <p>To mock the results of repeated <code>do_something</code> calls</p> <pre><code>     with patch(\"path.to.do_something\", side_effect=(4, 5, 6)):\nloopy_loop()\n</code></pre>"}]}